{"version":3,"sources":["Title.js","Finalshades.js","Colorbox.js","App.js","reportWebVitals.js","index.js"],"names":["Title","props","valuess","setvalues","submitted","className","onSubmit","value","onChange","element","target","Finalshades","useState","copies","setcopies","e","idx","useEffect","setInterval","text","hexString","onCopy","style","backgroundColor","Colorbox","colrshade","map","App","setcolrshade","preventDefault","isColor","colorshade","Values","shades","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAoBeA,EApBD,SAACC,GACb,IAAIC,EAAUD,EAAMC,QAChBC,EAAYF,EAAME,UAClBC,EAAYH,EAAMG,UACtB,OACE,0BAASC,UAAU,QAAnB,UACE,iDACA,uBAAMC,SAAUF,EAAhB,UACE,uBACEG,MAAOL,EACPM,SAAU,SAACC,GACTN,EAAUM,EAAQC,OAAOH,UAG7B,wBAAQF,UAAU,MAAlB,uB,OCiBOM,EA7BK,SAACV,GACjB,MAA2BW,oBAAS,GAApC,mBAAOC,EAAP,KAAcC,EAAd,KACIC,EAAId,EAAMc,EACVC,EAAMf,EAAMe,IAShB,OARAC,qBAAU,YACQ,IAAXJ,GACHK,aAAY,WACRJ,GAAU,KACZ,QAGH,CAACD,IAEA,cAAC,kBAAD,CAAiBM,KAAQJ,EAAEK,YAAaC,OAAS,WAAMP,GAAU,IAAjE,SAEOD,EAAW,qBAAgBS,MAAQ,CAACC,gBAAiBR,EAAEK,aAAcf,UAAW,cAArE,oBAAWW,GACpB,qBACDM,MAAQ,CAACC,gBAAiBR,EAAEK,aAC5Bf,UAAW,cAFV,SAIGU,EAAEK,aAJMJ,MCIbQ,EAlBE,SAACvB,GACd,MAA2BW,oBAAS,GAApC,mBACMa,GADN,UACkBxB,EAAMwB,WACxB,OACI,qBAAKpB,UAAW,WAAhB,SAEOoB,EAAUC,KAAI,SAACX,EAAEC,GAAH,OACrB,cAAC,EAAD,CAAaD,EAAIA,EAAGC,IAAMA,UCmBnBW,MAxBf,WACE,MAA6Bf,mBAAS,SAAtC,mBAAOV,EAAP,KAAgBC,EAAhB,KACA,EAAgCS,mBAAS,IAAzC,mBAAKa,EAAL,KAAgBG,EAAhB,KAcA,OACE,sBAAKvB,UAAU,MAAf,UACA,cAAC,EAAD,CAAOH,QAAUA,EAASC,UAAYA,EAAWC,UAfjC,SAACW,GAEnB,GADAA,EAAEc,iBACCC,IAAQ5B,GAAS,CAClB,IACM6B,EADQ,IAAIC,IAAO9B,GACA+B,OAAO,GAChCC,QAAQC,IAAIJ,GACZH,EAAaG,GACbG,QAAQC,IAAIV,OASb,cAAC,EAAD,CAAUA,UAAYA,QCbVW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.75b59bf0.chunk.js","sourcesContent":["const Title = (props) => {\r\n  let valuess = props.valuess;\r\n  let setvalues = props.setvalues;\r\n  let submitted = props.submitted;\r\n  return (\r\n    <section className=\"title\">\r\n      <h3>Color Generator</h3>\r\n      <form onSubmit={submitted}>\r\n        <input\r\n          value={valuess}\r\n          onChange={(element) => {\r\n            setvalues(element.target.value);\r\n          }}\r\n        ></input>\r\n        <button className=\"btn\">GO</button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import { useState,useEffect } from 'react';\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nconst Finalshades = (props) => {\r\n    const [copies,setcopies] = useState(false)\r\n    let e = props.e;\r\n    let idx = props.idx;\r\n    useEffect(() => {\r\n        if(copies === true){\r\n        setInterval(() => {\r\n            setcopies(false)\r\n        },1500);\r\n \r\n }\r\n    }, [copies])\r\n    return ( \r\n        <CopyToClipboard text = {e.hexString()} onCopy ={() =>{setcopies(true)}}>\r\n           {\r\n               copies ? ( <div key ={idx} style ={{backgroundColor :e.hexString() }}className =\"finalshades\">Copied!</div>) :\r\n               ( <div key ={idx} \r\n                style ={{backgroundColor :e.hexString() }}\r\n                className =\"finalshades\">\r\n \r\n                   {e.hexString()} \r\n                    </div>)\r\n           }\r\n                  \r\n        </CopyToClipboard>\r\n        \r\n     );\r\n}\r\n \r\nexport default Finalshades;","import { useState } from 'react';\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport Finalshades from './Finalshades';\r\n\r\nconst Colorbox = (props) => {\r\n    const [copies,setcopies] = useState(true)\r\n    const colrshade = props.colrshade;\r\n    return ( \r\n        <div className =\"colorbox\">\r\n           {\r\n               colrshade.map((e,idx) => (\r\n        <Finalshades e ={e} idx ={idx} />\r\n               \r\n               )\r\n               )\r\n       \r\n           }\r\n\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Colorbox;","import Values from 'values.js'\nimport isColor from 'is-color';\nimport { useState,useEffect } from \"react\";\nimport Title from \"./Title\";\nimport Colorbox from './Colorbox';\n\nfunction App() {\n  const [valuess ,setvalues] = useState(\"#0000\")\n  let [colrshade ,setcolrshade] = useState([]);\n const  submitted = (e) =>{\n  e.preventDefault();\n  if(isColor(valuess)){\n    const color = new Values(valuess);\n    const colorshade = color.shades(5);\n    console.log(colorshade)\n    setcolrshade(colorshade);\n    console.log(colrshade);\n  }\n\n }\n\n\n  return (\n    <div className=\"App\">\n    <Title valuess ={valuess} setvalues ={setvalues} submitted={submitted} />\n   <Colorbox colrshade ={colrshade}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}